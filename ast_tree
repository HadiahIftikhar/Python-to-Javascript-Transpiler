// AST
digraph {
	node53 [label=Program]
	node54 [label="FunctionDef(square)\nreturn_type=int"]
	node53 -> node54
	node55 [label="Return\ntype=int"]
	node54 -> node55
	node56 [label="BinaryOp(*)\ntype=int"]
	node55 -> node56
	node57 [label="Identifier(x)\ntype=int"]
	node56 -> node57
	node58 [label="Identifier(x)\ntype=int"]
	node56 -> node58
	node59 [label="FunctionDef(add)\nreturn_type=int"]
	node53 -> node59
	node60 [label="Assignment(result)\ntype=int"]
	node59 -> node60
	node61 [label="BinaryOp(+)\ntype=int"]
	node60 -> node61
	node62 [label="Identifier(a)\ntype=int"]
	node61 -> node62
	node63 [label="Identifier(b)\ntype=int"]
	node61 -> node63
	node64 [label="Return\ntype=int"]
	node59 -> node64
	node65 [label="Identifier(result)\ntype=int"]
	node64 -> node65
	node66 [label="Assignment(value)\ntype=int"]
	node53 -> node66
	node67 [label="Literal(5)\ntype=int, const=5"]
	node66 -> node67
	node68 [label="Assignment(squared)\ntype=int"]
	node53 -> node68
	node69 [label="Call\ntype=int"]
	node68 -> node69
	node70 [label="Identifier(square)"]
	node69 -> node70
	node71 [label="Identifier(value)\ntype=int"]
	node69 -> node71
	node72 [label="Assignment(total)\ntype=int"]
	node53 -> node72
	node73 [label="Call\ntype=int"]
	node72 -> node73
	node74 [label="Identifier(add)"]
	node73 -> node74
	node75 [label="Identifier(squared)\ntype=int"]
	node73 -> node75
	node76 [label="Literal(10)\ntype=int, const=10"]
	node73 -> node76
	node77 [label="FunctionDef(test)\nreturn_type=str"]
	node53 -> node77
	node78 [label="Assignment(message)\ntype=str"]
	node77 -> node78
	node79 [label="Literal('All good!')\ntype=str, const=All good!"]
	node78 -> node79
	node80 [label="Return\ntype=str"]
	node77 -> node80
	node81 [label="Identifier(message)\ntype=str"]
	node80 -> node81
}

// AST
digraph {
	node154 [label=Program]
	node155 [label="FunctionDef(test)\nreturn_type=None"]
	node154 -> node155
	node156 [label="Assignment(y)\ntype=int"]
	node155 -> node156
	node157 [label="BinaryOp(+)\ntype=int, const=14"]
	node156 -> node157
	node158 [label="Literal(2)\ntype=int, const=2"]
	node157 -> node158
	node159 [label="BinaryOp(*)\ntype=int, const=12"]
	node157 -> node159
	node160 [label="Literal(3)\ntype=int, const=3"]
	node159 -> node160
	node161 [label="Literal(4)\ntype=int, const=4"]
	node159 -> node161
	node162 [label=IfStatement]
	node155 -> node162
	node163 [label="Literal(True)\ntype=bool, const=True"]
	node162 -> node163
	node164 [label="Return\ntype=int"]
	node162 -> node164
	node165 [label="BinaryOp(+)\ntype=int"]
	node164 -> node165
	node166 [label="Identifier(y)\ntype=int"]
	node165 -> node166
	node167 [label="Literal(10)\ntype=int, const=10"]
	node165 -> node167
	node168 [label="Return\ntype=int"]
	node162 -> node168
	node169 [label="BinaryOp(-)\ntype=int"]
	node168 -> node169
	node170 [label="Identifier(y)\ntype=int"]
	node169 -> node170
	node171 [label="Literal(10)\ntype=int, const=10"]
	node169 -> node171
	node172 [label=WhileLoop]
	node154 -> node172
	node173 [label="Literal(False)\ntype=bool, const=False"]
	node172 -> node173
	node174 [label=ExpressionStatement]
	node172 -> node174
	node175 [label="Call\ntype=None"]
	node174 -> node175
	node176 [label="Identifier(print)"]
	node175 -> node176
	node177 [label="Literal('Dead code')\ntype=str, const=Dead code"]
	node175 -> node177
	node178 [label="Assignment(result)\ntype=None"]
	node154 -> node178
	node179 [label="Call\ntype=None"]
	node178 -> node179
	node180 [label="Identifier(test)"]
	node179 -> node180
	node181 [label="Literal(5)\ntype=int, const=5"]
	node179 -> node181
}

// AST
digraph {
<<<<<<< HEAD
	node53 [label=Program]
	node54 [label="FunctionDef(square)\nreturn_type=int"]
	node53 -> node54
	node55 [label="Return\ntype=int"]
	node54 -> node55
	node56 [label="BinaryOp(*)\ntype=int"]
	node55 -> node56
	node57 [label="Identifier(x)\ntype=int"]
	node56 -> node57
	node58 [label="Identifier(x)\ntype=int"]
	node56 -> node58
	node59 [label="FunctionDef(add)\nreturn_type=int"]
	node53 -> node59
	node60 [label="Assignment(result)\ntype=int"]
	node59 -> node60
	node61 [label="BinaryOp(+)\ntype=int"]
	node60 -> node61
	node62 [label="Identifier(a)\ntype=int"]
	node61 -> node62
	node63 [label="Identifier(b)\ntype=int"]
	node61 -> node63
	node64 [label="Return\ntype=int"]
	node59 -> node64
	node65 [label="Identifier(result)\ntype=int"]
	node64 -> node65
	node66 [label="Assignment(value)\ntype=int"]
	node53 -> node66
	node67 [label="Literal(5)\ntype=int, const=5"]
	node66 -> node67
	node68 [label="Assignment(squared)\ntype=int"]
	node53 -> node68
	node69 [label="Call\ntype=int"]
	node68 -> node69
	node70 [label="Identifier(square)"]
	node69 -> node70
	node71 [label="Identifier(value)\ntype=int"]
	node69 -> node71
	node72 [label="Assignment(total)\ntype=int"]
	node53 -> node72
	node73 [label="Call\ntype=int"]
	node72 -> node73
	node74 [label="Identifier(add)"]
	node73 -> node74
	node75 [label="Identifier(squared)\ntype=int"]
	node73 -> node75
	node76 [label="Literal(10)\ntype=int, const=10"]
	node73 -> node76
	node77 [label="FunctionDef(test)\nreturn_type=str"]
	node53 -> node77
	node78 [label="Assignment(message)\ntype=str"]
	node77 -> node78
	node79 [label="Literal('All good!')\ntype=str, const=All good!"]
	node78 -> node79
	node80 [label="Return\ntype=str"]
	node77 -> node80
	node81 [label="Identifier(message)\ntype=str"]
	node80 -> node81
=======
	node323 [label=Program]
	node324 [label="FunctionDef(square)\nreturn_type=int"]
	node323 -> node324
	node325 [label="Return\ntype=int"]
	node324 -> node325
	node326 [label="BinaryOp(*)\ntype=int"]
	node325 -> node326
	node327 [label="Identifier(x)\ntype=int"]
	node326 -> node327
	node328 [label="Identifier(x)\ntype=int"]
	node326 -> node328
	node329 [label="FunctionDef(add)\nreturn_type=int"]
	node323 -> node329
	node330 [label="Assignment(result)\ntype=int"]
	node329 -> node330
	node331 [label="BinaryOp(+)\ntype=int"]
	node330 -> node331
	node332 [label="Identifier(a)\ntype=int"]
	node331 -> node332
	node333 [label="Identifier(b)\ntype=int"]
	node331 -> node333
	node334 [label="Return\ntype=int"]
	node329 -> node334
	node335 [label="Identifier(result)\ntype=int"]
	node334 -> node335
	node336 [label="Assignment(value)\ntype=int"]
	node323 -> node336
	node337 [label="Literal(5)\ntype=int, const=5"]
	node336 -> node337
	node338 [label="Assignment(squared)\ntype=int"]
	node323 -> node338
	node339 [label="Call\ntype=int"]
	node338 -> node339
	node340 [label="Identifier(square)"]
	node339 -> node340
	node341 [label="Identifier(value)\ntype=int"]
	node339 -> node341
	node342 [label="Assignment(total)\ntype=int"]
	node323 -> node342
	node343 [label="Call\ntype=int"]
	node342 -> node343
	node344 [label="Identifier(add)"]
	node343 -> node344
	node345 [label="Identifier(squared)\ntype=int"]
	node343 -> node345
	node346 [label="Literal(10)\ntype=int, const=10"]
	node343 -> node346
	node347 [label="FunctionDef(test)\nreturn_type=str"]
	node323 -> node347
	node348 [label="Assignment(message)\ntype=str"]
	node347 -> node348
	node349 [label="Literal('All good!')\ntype=str, const=All good!"]
	node348 -> node349
	node350 [label="Return\ntype=str"]
	node347 -> node350
	node351 [label="Identifier(message)\ntype=str"]
	node350 -> node351
>>>>>>> c3912436f80d47b772a6a950fe9d3062cf51e53b
}
